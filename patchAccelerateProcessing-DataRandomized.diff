diff --git a/src/Exogenous_Variables.ipynb b/src/Exogenous_Variables.ipynb
index 9b353ab..b9767a3 100644
--- a/src/Exogenous_Variables.ipynb
+++ b/src/Exogenous_Variables.ipynb
@@ -150,15 +150,21 @@
     "        \n",
     "    return(list_one_step)\n",
     "\n",
+    "import time\n",
+    "import random\n",
+    "\n",
     "def model_based_forecast(train_data, exotrain=None):\n",
     "    ''' creates model from training data & makes a forecast\n",
     "        args: train_data = DataFrame to build forecasting model\n",
     "              exotrain   = DataFrame of exogenous location's rainfall data\n",
     "        returns: FLOAT value of next month's forecast value\n",
     "    '''\n",
-    "    mod = sarima_model_creation(train_data, 4, 0, 3, 3, 0, 4, 12, exotrain)\n",
+    "#     mod = sarima_model_creation(train_data, 4, 0, 3, 3, 0, 4, 12, exotrain)\n",
     "    # if exists, passing exotrain's prevMonth (december, for forecasting jan), otherwise only forcast based on model\n",
-    "    nextMonth = mod.forecast() if exotrain is None else mod.forecast(exog=exotrain.iloc[[-1]])       # turnary assignment expression\n",
+    "#     nextMonth = mod.forecast() if exotrain is None else mod.forecast(exog=exotrain.iloc[[-1]])       # turnary assignment expression\n",
+    "    val = random.uniform(1,5)\n",
+    "    time.sleep(val % 2)\n",
+    "    nextMonth = [ val ]\n",
     "    return(nextMonth)\n",
     "\n",
     "def maeFinder(train_data, test_data, exotrain=None, exotest=None, pbar=None):\n",
